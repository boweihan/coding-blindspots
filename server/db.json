{
  "snippets": [
    {
      "id": 1,
      "title": "First Snippet",
      "text": "interface ReviewProps {\n  location: {\n    state: {\n      snippet: Snippet;\n    };\n  };\n}",
      "language": "javascript"
    },
    {
      "id": "1587668015707",
      "title": "test",
      "text": "\"import React, { useEffect, useState } from 'react';\\nimport { CheckCircleTwoTone } from '@ant-design/icons';\\nimport { Spin } from 'antd';\\nimport RestClient from '../shared/rest';\\nimport { parseIfJson } from '../shared/util';\\nimport { addCommentLineWidget } from '../CommentWidget';\\nimport { Editor, EditorOptions } from '../Editor';\\nimport { Snippet, Comment } from '../types';\\nimport styles from './styles.css';\\nimport 'antd/es/spin/style';\\n\\ninterface ViewProps {\\n  location: {\\n    hash: string;\\n  };\\n}\\n\\nconst View = ({ location }: ViewProps) => {\\n  const [loaded, setLoaded] = useState(false);\\n  const [snippet, setSnippet] = useState<Snippet>();\\n  const [comments, setComments] = useState<Array<Comment>>([]);\\n  const snippetId = location.hash.slice(1);\\n\\n  useEffect(() => {\\n    // todo use Promise.all\\n    RestClient.get(`/snippets/${snippetId}`)\\n      .then((snippet) => setSnippet(snippet))\\n      .then(() =>\\n        RestClient.get(`/snippets/${snippetId}/comments`)\\n          .then((comments) => setComments(comments))\\n          .then(() => setLoaded(true))\\n      )\\n      .catch(() => {\\n        setLoaded(true);\\n      });\\n  }, []);\\n\\n  const createCommentWidgets = (cm: any) => {\\n    comments?.forEach((comment) => addCommentLineWidget(cm, comment));\\n  };\\n\\n  const statusContainer =\\n    !comments ||\\n    (comments.length <= 0 ? (\\n      <div className={styles.statusContainer}>\\n        <Spin size=\\\"small\\\" />\\n        <span className={styles.loadingText}>pending review</span>\\n      </div>\\n    ) : (\\n      <div className={styles.statusContainer}>\\n        <CheckCircleTwoTone twoToneColor=\\\"#52c41a\\\" />\\n        <span className={styles.successText}>review complete</span>\\n      </div>\\n    ));\\n\\n  if (!loaded) {\\n    return <div>loading</div>;\\n  }\\n\\n  if (!snippet) {\\n    return <div>no snippet sorry</div>;\\n  }\\n\\n  return (\\n    <div className={styles.container}>\\n      {statusContainer}\\n      <h2 className={styles.heading}>{snippet.title}</h2>\\n      <p>Public Snippet</p>\\n      <div>\\n        <EditorOptions language={snippet.language} />\\n        <div className={styles.editor}>\\n          <Editor\\n            key={JSON.stringify(comments)}\\n            text={parseIfJson(snippet.text)}\\n            language={snippet.language}\\n            // setTimeout required to avoid JS Execution race condition with CodeMirror\\n            onMount={(cm: any) => setTimeout(() => createCommentWidgets(cm), 0)}\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default View;\\n\"",
      "language": "javascript",
      "comments": []
    }
  ],
  "comments": [
    {
      "id": 1,
      "line": 1,
      "text": "## HTML block below\n\n<blockquote>\n  This blockquote will change based on the HTML settings above.\n</blockquote>\n\n## How about some code?\n```js\nvar React = require('react');\nvar Markdown = require('react-markdown');\n\nReact.render(\n  <Markdown source=\"# Your markdown here\" />,\n  document.getElementById('content')\n);",
      "snippetId": 1
    },
    {
      "id": 2,
      "line": 4,
      "text": "This is a **neat** *line* of code!",
      "snippetId": 1
    }
  ],
  "profile": {
    "name": "typicode"
  }
}